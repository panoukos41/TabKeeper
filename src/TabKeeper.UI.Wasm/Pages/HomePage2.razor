@page "/home"

@inherits CoreComponent
@inject TranslateService translate

<div>
    <div class="text-lg border-b">
        <p>Personal</p>
        @if (personalGroup.Invalid)
        {
            <FaSolidCircleExclamation class="w-6 h-6 text-red-500" />
        }
    </div>
    <div class="container-wrapper">
        <div class="container">
            <RxInput Id="FirstName" Type="text" Label="First Name" FormGroup="personalGroup" @bind-Value="Request.Personal.FirstName" />
            <RxInput Id="LastName" Type="text" Label="Last Name" FormGroup="personalGroup" @bind-Value="Request.Personal.LastName" />
        </div>
    </div>
</div>

<div>
    <div class="text-lg border-b">
        <p>Economic</p>
        @if (economicGroup.Invalid)
        {
            <FaSolidCircleExclamation class="w-6 h-6 text-red-500" />
        }
    </div>
    <div class="container-wrapper">
        <div class="container">
            <RxInput Id="AnnualIncome" Type="number" Label="Income" FormGroup="economicGroup" @bind-Value="Request.Economic.AnnualIncome" />
            <RxInput Id="AssetsValue" Type="number" Label="Assets" FormGroup="economicGroup" @bind-Value="Request.Economic.AssetsValue" />
        </div>
    </div>
</div>

<div>
    <div class="text-lg border-b">
        <p>Children</p>
        @if (childrenArray.Invalid)
        {
            <FaSolidCircleExclamation class="w-6 h-6 text-red-500" />
        }
    </div>
    <div class="container-wrapper">
        @for (int i = 0; i < childrenArray.Count; i++)
        {
            var index = i;
            var formGroup = (FormGroup)childrenArray[index];

            <div class="container not:last:border-b">
                <RxInput Id="FirstName" Label="First Name" FormGroup="formGroup" @bind-Value="Request.Children[index].FirstName" />
                <RxInput Id="LastName" Label="Last Name" FormGroup="formGroup" @bind-Value="Request.Children[index].LastName" />
            </div>
        }
    </div>
</div>

<Button class="btn btn-primary mt-auto" OnClick="() => RemoveChild(0)">Remove</Button>

<Button class="btn btn-primary mt-auto" OnClick="AddChild">Add</Button>

<Button class="btn btn-primary mt-auto" OnClick="Test" disabled="@(formGroup.Invalid)">Test</Button>


@code {
    private static readonly ValidatorFn Required = Validators.Required;
    private static readonly ValidatorFn MinLength3 = Validators.MinLength(3);
    private static readonly ValidatorFn Min3 = Validators.Min(3M);

    private UpdateRequest Request { get; set; } = new();

    private FormGroup formGroup;
    private FormGroup personalGroup;
    private FormGroup economicGroup;
    private FormArray childrenArray;

    public HomePage2()
    {
        formGroup = new()
        {
            ["Personal"] = personalGroup = new()
            {
                ["FirstName"] = new FormControl<string>(sync: [Required, MinLength3]),
                ["LastName"] = new FormControl<string>(sync: [Required, MinLength3])
            },
            ["Economic"] = economicGroup = new()
            {
                ["AnnualIncome"] = new FormControl<decimal>(sync: [Required, Min3]),
                ["AssetsValue"] = new FormControl<decimal>(sync: [Required, Min3])
            },
            ["Children"] = childrenArray = new(),
        };
        AddChild();
    }

    protected override void OnInitialized()
    {
        formGroup.Events.Subscribe(_ => TriggerUpdate());
    }

    private void AddChild()
    {
        childrenArray.Add(new FormGroup()
        {
            ["FirstName"] = new FormControl<string>(sync: [Required, MinLength3]),
            ["LastName"] = new FormControl<string>(sync: [Required, MinLength3])
        });
        Request.Children.Add(new());
        TriggerUpdate();
    }

    private void RemoveChild(int index)
    {
        childrenArray.RemoveAt(index);
        Request.Children.RemoveAt(index);
        TriggerUpdate();
    }

    private void Test()
    {
        Console.WriteLine($"Income Vs: {formGroup.GetFormControl<decimal>("Economic.AnnualIncome").Validators.Count()}");

        Console.WriteLine($"- AnnualIncome: {formGroup.GetFormControl<decimal>("Economic.AnnualIncome").Value}");
        Console.WriteLine($"-  AssetsValue: {formGroup.GetFormControl<decimal>("Economic.AssetsValue").Value}");
        Console.WriteLine("Children");
        for (int i = 0; i < childrenArray.Count; i++)
        {
            Console.WriteLine($"- {i,00} - FirstName: {formGroup.GetFormControl<string>($"Children.[{i}].FirstName").Value}");
            Console.WriteLine($"- {i,00} -  LastName: {formGroup.GetFormControl<string>($"Children.[{i}].LastName").Value}");
        }
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(Request));
    }

    private class UpdateRequest
    {
        public PersonalDetails Personal { get; } = new();

        public EconomicDetails Economic { get; } = new();

        public List<PersonalDetails> Children { get; } = [];
    }

    private class PersonalDetails
    {
        public string FirstName { get; set; } = string.Empty;
        
        public string LastName { get; set; } = string.Empty;
    }

    private class EconomicDetails
    {
        public decimal AnnualIncome { get; set; }
        
        public decimal AssetsValue { get; set; }
    }
}
