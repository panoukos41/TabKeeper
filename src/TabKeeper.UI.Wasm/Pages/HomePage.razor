@page "/"
@inherits CoreComponent
@inject IndexedDb indexedDb
@inject NavigationManager nav
@inject TranslateService translate

<div class="h-full flex flex-col relative">
    @* Tabs  *@
    <div class="grow overflow-y-auto space-y-2">
        @foreach(var entry in Entries.Items.OrderBy(x => x.Date))
        {
            <div class="card flex gap-3 items-center" @key="@entry.Id.ToString()">
                <h2 class="mb-0 me-auto truncate">@entry.Name</h2>

                <Button class="btn btn-danger h-10" OnClick="() => Entries.Remove(entry)">
                    <FaSolidTrash class="icon-sm" />
                </Button>

                <Button class="btn btn-primary h-10" OnClick="@(() => nav.NavigateTo($"tabs/{entry.Id}"))"> 
                    <FaSolidCircleArrowRight class="icon-sm" />
                </Button>
            </div>
        }
    </div>

    @* Options  *@
    <div class="absolute bottom-1 right-1 flex gap-1 bg-primary rounded-3xl">
        <Button class="btn w-14 h-14 rounded-3xl" OnClick="() => addEntryModal.Show()">
            <FaSolidPlus class="icon" />
        </Button>
        <div class="border-l border-surface h-8 self-center"></div>
        <Dropdown>
            <DropdownButton class="btn w-14 h-14 rounded-3xl">
                <FaSolidEllipsis class="icon" />
            </DropdownButton>
            <DropdownContent class="min-w-52 bg-primary-container px-3 py-2" Anchor="Anchor.Top | Anchor.Right">
                <DropdownItem OnClick="@(() => nav.NavigateTo("settings"))"><FaSolidGear class="icon-xs me-2" /> @("settings.title" | translate)</DropdownItem>
            </DropdownContent>
        </Dropdown>
    </div>
</div>

<Modal @ref="addEntryModal" class="self-center flex flex-col gap-2">
    <TabKeeper.Pages.Tabs.Components.TabForm
        id="new-tab-form"
        OnValidSubmit="TabValidSubmit"
    />
    <Button class="btn btn-primary gap-2" type="submit" form="new-tab-form">
        <FaSolidPlus class="icon-sm" />
        <span>@("add" | translate)</span>
    </Button>
</Modal>

@code {
    private Modal addEntryModal = null!;
    private SourceList<TabEntry> Entries { get; } = new();
    private bool loading = true;

    private async Task TabValidSubmit(TabKeeper.Tabs.Tab tab)
    {
        await indexedDb.Tabs.AddAsync(tab);
        nav.NavigateTo($"tabs/{tab.Id}");
    }

    protected override void OnInitialized()
    {
        ShellLayout.Context = new() { Title = "general.home" | translate };

        indexedDb.Tabs
            .GetAllAsync<TabEntry>()
            .ToObservable()
            .Do(entries =>
            {
                Entries.AddRange(entries);
                Entries
                    .Connect()
                    .OnItemRemoved(async entry => await indexedDb.Tabs.BatchDeleteAsync([entry.Id]), invokeOnUnsubscribe: false)
                    .Subscribe(_ => TriggerUpdate())
                    .DisposeWith(this);
                loading = false;
            })
            .Subscribe(_ => Update());

        // NewTabEntryName.Subscribe(_ => Update());
    }

    private record TabEntry(Uuid Id, string Name, DateOnly? Date);
}
