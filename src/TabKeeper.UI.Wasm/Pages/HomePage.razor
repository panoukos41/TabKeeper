@page "/"
@inherits CoreComponent
@inject ISyncLocalStorageService storage
@inject NavigationManager nav
@inject TranslateService translate

<div class="h-full flex flex-col relative">
    <div class="grow overflow-y-auto space-y-2">
        @foreach(var entry in Entries.Items)
        {
            <div class="card flex gap-3 items-center" @key="@entry.Id.ToString()">
                <h2 class="mb-0 me-auto truncate">@entry.Name</h2>

                <Button class="btn btn-danger h-10" OnClick="() => Entries.Remove(entry)">
                    <FaSolidTrash class="icon-sm" />
                </Button>

                <Button class="btn btn-primary h-10" OnClick="@(() => nav.NavigateTo($"tabs/{entry.Id}"))"> 
                    <FaSolidCircleArrowRight class="icon-sm" />
                </Button>
            </div>
        }
    </div>

    <div class="absolute bottom-1 right-1 flex gap-1 bg-primary rounded-3xl">
        <Button class="btn w-14 h-14 rounded-3xl" OnClick="() => addEntryModal.Show()">
            <FaSolidPlus class="icon" />
        </Button>
        <div class="border-l border-surface h-8 self-center"></div>
        <Dropdown>
            <DropdownButton class="btn w-14 h-14 rounded-3xl">
                <FaSolidEllipsis class="icon" />
            </DropdownButton>
            <DropdownContent class="min-w-52 bg-primary-container px-3 py-2" Anchor="Anchor.Top | Anchor.Right">
                <DropdownItem OnClick="@(() => nav.NavigateTo("settings"))"><FaSolidGear class="icon-xs me-2" /> @("settings.title" | translate)</DropdownItem>
            </DropdownContent>
        </Dropdown>
    </div>
</div>

<Modal @ref="addEntryModal" UpdateWhen="newTabForm.ValueChanges.ToNone()" class="self-center min-h-52 flex flex-col">
    <RxFormGroup FormGroup="newTabForm">
        <div class="material-input">
            <RxInput Id="name" Label="Name" T="string" Validators="[Validators.Required, MinLength3]" HideErrors />
        </div>
        <RxOutputErrors Id="name" />
    </RxFormGroup>
    <Button class="btn btn-primary mt-auto" OnClick="AddNewTab" disabled="@(newTabForm.Invalid)">Add</Button>
</Modal>

@code {
    private ValidatorFn MinLength3 = Validators.MinLength(3);
    private const string EntriesKey = "tab-entries";

    private FormGroup newTabForm = new();
    private Modal addEntryModal = null!;

    private SourceList<TabEntry> Entries { get; } = new();

    private void AddNewTab()
    {
        if (newTabForm.Invalid) return;

        var name = newTabForm.GetFormControl<string>("name")?.Value;

        if (name is null or "") return;

        var entryId = Uuid.NewUuid();
        Entries.Insert(0, new TabEntry(entryId, name));
        nav.NavigateTo($"tabs/{entryId}");
    }

    protected override void OnInitialized()
    {
        ShellLayout.Context = new() { Title = "general.home" | translate };

        // NewTabEntryName.Subscribe(_ => Update());
        Entries
            .Connect()
            .OnItemAdded(entry => storage.TrySetItem(entry.Id, new TabKeeper.Tabs.Tab { Id = entry.Id, Name = entry.Name, Date = DateOnly.FromDateTime(DateTime.Now) }))
            .OnItemRemoved(entry => storage.RemoveItem(entry.Id), invokeOnUnsubscribe: false)
            .QueryWhenChanged()
            .Do(entries => storage.SetItem(EntriesKey, entries))
            .Subscribe(_ => TriggerUpdate())
            .DisposeWith(this);

        Entries.AddRange(storage.GetItem<List<TabEntry>>(EntriesKey) ?? []);
    }

    private record TabEntry(Uuid Id, string Name);
}
