@page "/"
@using TabKeeper.Tabs
@inherits CoreComponent
@inject StorageDb db
@inject NavigationManager nav
@inject TranslateService translate

<div class="h-full flex flex-col relative">
    @* Tabs  *@
    <div class="grow overflow-y-auto space-y-2">
        @foreach (var entry in Tabs.Items.OrderBy(x => x.Date))
        {
            <div class="card p-0 grid grid-cols-[70fr_30fr] gap-3 overflow-clip" @key="@entry.Id.ToString()" @onclick="() => SelectedTab.OnNext(entry)">
                <div class="p-4 me-auto max-w-full truncate">
                    <h2 class="mb-0 truncate">@entry.Name</h2>
                </div>
                <a class="bg-primary-container flex items-center justify-center" href="@($"tab/{entry.Id}")">
                    <FaSolidArrowRight class="icon-sm" />
                </a>
            </div>
        }
    </div>

    @* Bar *@
    <div class="p-2 bg-secondary-container rounded-md flex gap-4 items-center">
        <Dropdown>
            <DropdownButton class="btn">
                <FaSolidEllipsis class="icon" />
            </DropdownButton>
            <DropdownContent class="min-w-52 bg-primary-container px-3 py-2" Anchor="Anchor.Top | Anchor.Left">
                <DropdownItem OnClick="@(() => nav.NavigateTo("settings"))"><FaSolidGear class="icon-xs me-2" /> @("settings.title" | translate)</DropdownItem>
            </DropdownContent>
        </Dropdown>

        <Button class="ms-auto btn btn-primary w-12 h-12" OnClick="() => addEntryModal.Open()">
            <FaSolidPlus class="icon" />
        </Button>
    </div>
</div>

@* Add  *@
<Modal @ref="addEntryModal">
    <TabKeeper.Pages.Tabs.Components.TabForm
        Id="new-tab-form"
        OnValidSubmit="TabAdd"
    />
    <Button class="btn btn-primary gap-2 mt-4 min-w-40 mx-auto" type="submit" form="new-tab-form">
        <FaSolidPlus class="icon-sm" />
        <span>@("add" | translate)</span>
    </Button>
</Modal>

@* Edit *@
<Modal IsOpenWhen="SelectedTab.IsNotNull()">
    @{
        var entry = SelectedTab.Value;
        if (entry is null) return;
    }
    <TabKeeper.Pages.Tabs.Components.TabForm
        Id="edit-tab-form"
        Tab="entry with { }"
        OnValidSubmit="TabUpdate"
        WhenDelete="TabDelete"
    />
    <Button class="btn btn-primary gap-2 mt-4 min-w-40 mx-auto" type="submit" form="edit-tab-form">
        <FaSolidPen class="icon-xs" />
        <span>@("update" | translate)</span>
    </Button>
</Modal>

@code {
    private BehaviorSubject<Tab?> SelectedTab { get; } = new(null);
    private Modal addEntryModal = null!;
    private SourceCache<Tab, Uuid> Tabs { get; } = new(x => x.Id);
    private bool loading = true;

    private async Task TabAdd(TabKeeper.Tabs.Tab tab)
    {
        await db.Tabs.Add(tab);
        nav.NavigateTo($"tab/{tab.Id}");
    }

    private async Task TabUpdate(TabKeeper.Tabs.Tab tab)
    {
        SelectedTab.OnNext(null);
        Tabs.AddOrUpdate(tab);
        await db.Tabs.Put(tab);
    }

    private void TabDelete(TabKeeper.Tabs.Tab tab)
    {
        SelectedTab.OnNext(null);
        Tabs.Remove(tab);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        ShellLayout.Context = new() { Title = "general.home" | translate };

        db.Tabs
            .GetAll()
            .AsTask()
            .ToObservable()
            .Do(entries =>
            {
                Tabs.AddOrUpdate(entries);
                Tabs.Connect()
                    .OnItemRemoved(async entry => await db.Tabs.Delete(entry.Id), invokeOnUnsubscribe: false)
                    .Subscribe(_ => Update())
                    .DisposeWith(this);
                loading = false;
            })
            .Subscribe(_ => Update())
            .DisposeWith(this);
    }
}
