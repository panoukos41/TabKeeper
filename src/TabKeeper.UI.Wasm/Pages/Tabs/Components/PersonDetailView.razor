@inherits CoreRxComponent<TabPersonViewModel>
@inject TranslateService translate

<div class="space-y-3">
    <div class="flex items-center justify-between">
        <Button If="@(!edit && !delete)" class="btn btn-danger gap-2 h-10" OnClick="StartDelete">
            <FaRegularTrashCan class="icon-xs" />
        </Button>
        <h1 class="m-0">
            @ViewModel.Name
        </h1>
        <Button If="@(!edit)" class="btn btn-primary gap-2 h-10" OnClick="StartEdit">
            <FaSolidPen class="icon-xs" />
        </Button>
    </div>
    @if (edit)
    {
        <PersonForm id="update-person-form" Person="@(ViewModel.Person with { })" OnValidSubmit="ValidSubmit" />
        <div class="flex flex-row-reverse gap-2">
            <Button class="btn btn-primary gap-2 grow" type="submit" form="update-person-form">
                <FaSolidPlus class="icon-sm" />
                <span>@("update" | translate)</span>
            </Button>
            <Button class="btn btn-cancel gap-2 grow" OnClick="CancelEdit">
                <FaSolidX class="icon-xs" />
                <span>@("cancel" | translate)</span>
            </Button>
        </div>
    }
    else if (delete)
    {
        <div>
            <h3 class="mb-4">@("delete-question" | translate)</h3>
            <div class="flex gap-2">
                <Button class="btn btn-danger gap-2 grow" OnClick="Delete">
                    <FaSolidCheck class="icon-xs" />
                    <span>@("yes" | translate)</span>
                </Button>
                <Button class="btn btn-tertiary gap-2 grow" OnClick="CancelDelete">
                    <FaSolidXmark class="icon-xs" />
                    <span>@("no" | translate)</span>
                </Button>
            </div>
        </div>
    }
    else
    {
        @foreach (var product in TabViewModel.Products)
        {
            var key = product.ProductId.ToString();

            <div class="flex items-center border gap-2 mb-2 rounded bg-primary-container">
                <input id="@key" @key="key" class="ms-4 my-2 rounded-full" type="checkbox" checked="@ViewModel.HasProduct(product)" @onchange="() => ViewModel.ToggleProduct(product)" />
                <label for="@key" class="my-2 me-4 grow cursor-pointer">@product.Name</label>
            </div>
        }
    }
</div>

@code {
    private bool edit;
    private bool delete;

    [Parameter, EditorRequired]
    public TabViewModel TabViewModel { get; set; } = null!;

    [Parameter]
    public EventCallback<TabPersonViewModel> WhenDelete { get; set; }

    private void StartEdit()
    {
        edit = true;
        Update();
    }

    private void CancelEdit()
    {
        edit = false;
        Update();
    }

    private void ValidSubmit(Person person)
    {
        ViewModel.Person = person;
        edit = false;
        Update();
    }

    private void StartDelete()
    {
        delete = true;
        Update();
    }

    private void CancelDelete()
    {
        delete = false;
        Update();
    }

    private void Delete()
    {
        WhenDelete.InvokeAsync(ViewModel);
    }
}
