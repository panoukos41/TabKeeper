@page "/tab/{Id}"
@inherits CoreRxComponent<TabViewModel>
@inject StorageDb db
@inject TranslateService translate

@* Loading *@
@if (loading)
{
    <div class="h-full flex items-center justify-center">
        <div class="max-h-1/2 max-w-full">
            <LottiePlayer Source="lottie/loading.lottie" AutoPlay Loop />
        </div>
    </div>
    return;
}

@* Not Found *@
@if (ViewModel is null)
{
    <div class="h-full flex items-center justify-center">
        <div class="max-h-1/2 max-w-full">
            <NotFound />
        </div>
    </div>
    return;
}

@* Found  *@
<div class="h-full flex flex-col gap-2">
    <TabGroup Context="tabGroup">
        <TabPanels class="flex-grow overflow-y-auto">
            @* Products Tab *@
            <TabPanel AsComponent="typeof(Fragment)">
                <div class="flex flex-col gap-3 flex-grow overflow-y-auto">
                    @foreach (var product in ViewModel.Products.Items)
                    {
                        <ProductCardView
                            @key="product.ProductId.ToString()"
                            ViewModel="product"
                            OnClick="() => SelectedProduct.OnNext(product)"
                        />
                    }
                </div>
            </TabPanel>
            @* People Tab *@
            <TabPanel AsComponent="typeof(Fragment)">
                <div class="flex flex-col gap-3 flex-grow overflow-y-auto">
                    @foreach (var person in ViewModel.People.Items)
                    {
                        <PersonCardView
                            @key="person.PersonId.ToString()"
                            ViewModel="person"
                            OnClick="() => SelectedPerson.OnNext(person)"
                        />
                    }
                </div>
            </TabPanel>
        </TabPanels>

        <div class="p-2 bg-secondary-container rounded-md space-y-2">
            <div class="flex gap-2 items-center">
                <div class="flex items-center justify-center gap-2">
                    <FaSolidReceipt class="icon-sm" />
                    <p class="font-semibold">@ViewModel.Total.ToString("0.00")</p>
                </div>

                <div class="ms-3 me-auto flex items-center justify-center gap-2">
                    <FaSolidCoins class="icon-sm" />
                    <p class="font-semibold">@ViewModel.People.Items.Sum(x => x.Total).ToString("0.00")</p>
                </div>

                @* <Button class="btn btn-tertiary p-2">
                    <FaSolidPen class="icon" />
                </Button> *@

                <Button class="btn btn-tertiary p-2" OnClick="() => NewPersonModal.Show()">
                    <FaSolidUserPlus class="icon" />
                </Button>

                <Button class="btn btn-tertiary p-2" OnClick="() => NewProductModal.Show()">
                    <FaSolidCartPlus class="icon" />
                </Button>
            </div>

            <TabList class="flex gap-2">
                <Tab Context="tab" class="@Css.Class("btn gap-2 font-bold grow h-11", tabGroup.SelectedIndex is 0 ? "btn-primary" : "btn-secondary")">
                    <FaSolidBasketShopping class="icon-sm" />
                    <span>@("products" | translate)</span>
                </Tab>

                <Tab Context="tab" class="@Css.Class("btn gap-2 font-bold grow h-11", tabGroup.SelectedIndex is 1 ? "btn-primary" : "btn-secondary")">
                    <FaSolidPeopleGroup class="icon-sm" />
                    <span>@("people" | translate)</span>
                </Tab>
            </TabList>
        </div>
    </TabGroup>
</div>

@* Product Modal *@
<Modal BackdropDismiss IsOpenWhen="SelectedProduct.IsNotNull()">
    @{
        var product = SelectedProduct.Value!;
    }
    <ProductDetailView ViewModel="product" TabViewModel="ViewModel" />
    <Button class="min-w-60 mx-auto btn btn-secondary gap-2 mt-4" OnClick="() => context.Close()">
        <FaSolidXmark class="icon-sm" />
        <span>@("close" | translate)</span>
    </Button>
</Modal>

@* Person Modal *@
<Modal BackdropDismiss IsOpenWhen="SelectedPerson.IsNotNull()">
    @{
        var person = SelectedPerson.Value!;
    }
    <PersonDetailView ViewModel="person" TabViewModel="ViewModel" />
    <Button class="min-w-60 mx-auto btn btn-secondary gap-2 mt-4" OnClick="() => context.Close()">
        <FaSolidXmark class="icon-sm" />
        <span>@("close" | translate)</span>
    </Button>
</Modal>

@* Add Product Modal *@
<Modal @ref="NewProductModal" BackdropDismiss class="self-center flex flex-col gap-2">
    <ProductForm id="new-product-form" OnValidSubmit="OnValidProduct" OnValidReset />
    <div class="flex flex-row-reverse gap-2">
        <Button class="btn btn-primary gap-2 grow" type="submit" form="new-product-form">
            <FaSolidPlus class="icon-sm" />
            <span>@("add" | translate)</span>
        </Button>
        <Button class="btn btn-cancel gap-2 grow" OnClick="() => NewProductModal.Close()">
            <FaSolidX class="icon-xs" />
            <span>@("close" | translate)</span>
        </Button>
    </div>
</Modal>

@* Add Person Modal *@
<Modal @ref="NewPersonModal" BackdropDismiss class="self-center flex flex-col gap-2">
    <PersonForm id="new-person-form" OnValidSubmit="OnValidPerson" OnValidReset />
    <div class="flex flex-row-reverse gap-2">
        <Button class="btn btn-primary gap-2 grow" type="submit" form="new-person-form">
            <FaSolidPlus class="icon-sm" />
            <span>@("add" | translate)</span>
        </Button>
        <Button class="btn btn-cancel gap-2 grow" OnClick="() => NewPersonModal.Close()">
            <FaSolidX class="icon-xs" />
            <span>@("close" | translate)</span>
        </Button>
    </div>
</Modal>

@code {
    private bool loading = true;

    private BehaviorSubject<TabProductViewModel?> SelectedProduct { get; } = new(null);
    private BehaviorSubject<TabPersonViewModel?> SelectedPerson { get; } = new(null);

    private Modal NewProductModal { get; set; } = null!;
    private Modal NewPersonModal { get; set; } = null!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private void OnValidProduct(TabProduct product)
    {
        ViewModel.AddProduct(new(product));
    }

    private void OnValidPerson(Person person)
    {
        ViewModel.AddPerson(new(new TabPerson(person)));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        db.Tabs
            .Get(Uuid.Parse(Id))
            .AsTask()
            .ToObservable()
            .Subscribe(tab =>
            {
                if (tab is null) return;

                ShellLayout.Context = new() { Title = tab.Name, BackUri = "" };
                ViewModel = new TabViewModel(tab);
                ViewModel.WhenPropertyChanged
                    .Throttle(TimeSpan.FromMilliseconds(500))
                    .Subscribe(async _ => await db.Tabs.Put(ViewModel.Tab))
                    .DisposeWith(this);

                loading = false;
                Update();
            })
            .DisposeWith(this);
    }
}
