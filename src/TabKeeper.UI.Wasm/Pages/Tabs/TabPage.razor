@page "/tabs/{Id}"

@inherits CoreRxComponent<TabViewModel>

@inject ISyncLocalStorageService storage

<PageTitle>Tab Keeper</PageTitle>

<div class="h-full flex flex-col gap-2">
    <TabGroup Context="tabGroup">
        <TabPanels class="flex-grow overflow-y-auto">
            @* Products Tab *@
            <TabPanel AsComponent="typeof(Fragment)">
                <div class="flex flex-col gap-3 flex-grow overflow-y-auto">
                    @foreach (var product in ViewModel.Products.Items)
                    {
                        <ProductCardView
                            @key="product.ProductId.ToString()"
                            ViewModel="product"
                            OnEditClicked="() => SelectedProduct.OnNext(product)"
                            OnRemoveClicked="() => ViewModel.RemoveProduct(product)"
                        />
                    }
                </div>
            </TabPanel>
            @* People Tab *@
            <TabPanel AsComponent="typeof(Fragment)">
                <div class="flex flex-col gap-3 flex-grow overflow-y-auto">
                    @foreach (var person in ViewModel.People.Items)
                    {
                        <PersonCardView
                            @key="person.PersonId.ToString()"
                            ViewModel="person"
                            OnEditClicked="() => SelectedPerson.OnNext(person)"
                            OnRemoveClicked="() => ViewModel.RemovePerson(person)"
                        />
                    }
                </div>
            </TabPanel>
        </TabPanels>

        <div class="p-4 bg-secondary-container rounded-xl space-y-4">
            <TabList class="flex gap-2 justify-between">
                <Tab Context="tab" class="@Css.Class("border border-secondary rounded p-1 mx-auto w-full", tabGroup.SelectedIndex is 0 ? "font-bold interactive-bg-secondary" : "interactive-bg-secondary-container")">
                    Products
                </Tab>
                <Tab Context="tab" class="@Css.Class("border border-secondary rounded p-1 mx-auto w-full", tabGroup.SelectedIndex is 1 ? "font-bold interactive-bg-secondary" : "interactive-bg-secondary-container")">
                    People
                </Tab>
            </TabList>

            <div class="flex gap-4 items-center">
                <div class="me-auto text-on-secondary-container flex items-center gap-2">
                    <FaSolidCashRegister class="icon" />
                    <p class="text-lg font-semibold">@ViewModel.Products.Items.Sum(x => x.Total)</p>
                    <div class="h-4 mx-2 border border-gray-700"></div>
                    <FaSolidCalculator class="icon" />
                    <p class="text-lg font-semibold">@ViewModel.People.Items.Sum(x => x.Total)</p>
                </div>
                <Button class="btn btn-primary p-2" OnClick="() => NewProduct.OnNext(new())">
                    <FaSolidCartPlus class="icon" />
                </Button>
                <Button class="btn btn-primary p-2" OnClick="() => NewPerson.OnNext(new())">
                    <FaSolidUserPlus class="icon" />
                </Button>
            </div>
        </div>
    </TabGroup>
</div>

@* Product Modal *@
<Modal BackdropDismiss IsOpenWhen="SelectedProduct.IsNotNull()">
    @{
        var product = SelectedProduct.Value!;
    }

    <div class="flex justify-between">
        <h1 class="my-2">@product.Name</h1>
        <button class="btn rounded-full w-10 h-10" @onclick="() => context.Close()">X</button>
    </div>

    @foreach (var person in ViewModel.People.Items)
    {
        var key = person.PersonId.ToString();
        <div class="flex items-center border gap-2 mb-2 rounded bg-primary-container" @onclick="() => person.ToggleProduct(product)">
            <input id="@key" @key="key" class="ms-4 my-2 rounded-full" type="checkbox" checked="@person.HasProduct(product)" @onchange="() => person.ToggleProduct(product)" />
            <label for="@key" class="my-2 me-4 flex-grow cursor-pointer">@person.Name</label>
        </div>
    }
    <button class="btn btn-secondary mx-auto" @onclick="() => context.Close()">Close</button>
</Modal>

@* Person Modal *@
<Modal BackdropDismiss IsOpenWhen="SelectedPerson.IsNotNull()">
    @{
        var person = SelectedPerson.Value!;
    }

    <div class="flex justify-between">
        <h1 class="my-2">@person.Name</h1>
        <button class="btn rounded-full w-10 h-10" @onclick="() => context.Close()">X</button>
    </div>

    @foreach (var product in ViewModel.Products.Items)
    {
        var key = product.ProductId.ToString();
        <div class="flex items-center border gap-2 mb-2 rounded bg-primary-container" @onclick="() => person.ToggleProduct(product)">
            <input id="@key" @key="key" class="ms-4 my-2 rounded-full" type="checkbox" checked="@person.HasProduct(product)" @onchange="() => person.ToggleProduct(product)" />
            <label for="@key" class="my-2 me-4 flex-grow cursor-pointer">@product.Name</label>
        </div>
    }
    <button class="btn btn-secondary mx-auto" @onclick="() => context.Close()">Close</button>
</Modal>

@* Add Product Modal *@
<Modal BackdropDismiss IsOpenWhen="NewProduct.IsNotNull()">
    @if (NewProduct.Value is null) { return; }

    <EditForm Model="NewProduct" Context="_" OnValidSubmit="OnAddProduct" class="flex flex-col gap-3">
        <FluentValidator TModel="ProductViewModel" FailureNotifications="NewProduct.Value.WhenProblem.Select(x => x.ValidationFailures).WhereNotNull()" />

        <div class="material-group">
            <RxInput @bind-Value="NewProduct.Value.Name" Label="Name" class="material-input" label-class="material-label" error-class="material-error" />
        </div>

        <div class="material-group">
            <RxInput @bind-Value="NewProduct.Value.Price" Label="Price" type="number" step="0.01" class="material-input" label-class="material-label" error-class="material-error" />
        </div>

        <Button type="submit" class="btn btn-primary mt-4">Add</Button>
    </EditForm>
</Modal>

@* Add Person Modal *@
<Modal BackdropDismiss IsOpenWhen="NewPerson.IsNotNull()">
    @if (NewPerson.Value is null) { return; }

    <EditForm Model="NewPerson" Context="_" OnValidSubmit="OnAddPerson" class="flex flex-col gap-3">
        <FluentValidator TModel="PersonViewModel" FailureNotifications="NewPerson.Value.WhenProblem.Select(x => x.ValidationFailures).WhereNotNull()" />

        <div class="material-group">
            <RxInput @bind-Value="NewPerson.Value.Name" Label="Name" class="material-input" label-class="material-label" error-class="material-error" />
        </div>

        <Button type="submit" class="btn btn-primary mt-4">Add</Button>
    </EditForm>
</Modal>

@code {
    public override TabViewModel ViewModel { get; set; } = null!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private void OnAddProduct()
    {
        ViewModel.AddProduct(NewProduct!.Value);
        NewProduct.OnNext(new());
    }

    private void OnAddPerson()
    {
        ViewModel.AddPerson(NewPerson!.Value);
        NewPerson.OnNext(new());
    }

    private BehaviorSubject<ProductViewModel?> SelectedProduct { get; } = new(null);
    private BehaviorSubject<PersonViewModel?> SelectedPerson { get; } = new(null);
    private BehaviorSubject<ProductViewModel?> NewProduct { get; } = new(null);
    private BehaviorSubject<PersonViewModel?> NewPerson { get; } = new(null);

    protected override void OnInitialized()
    {
        var tab = storage.GetItem<TabKeeper.Tabs.Tab>(Id);
        if (tab is null)
        {
            return;
        }

        ViewModel = new TabViewModel(tab);
        ViewModel.WhenPropertyChanged
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe(_ =>
            {
                var tab = ViewModel.Tab;
                tab.People.Clear();
                tab.People.AddRange(ViewModel.People.Items.Select(x => new PersonTab(new() { Id = x.PersonId, Name = x.Name })
                {
                    ProductIds = [.. x.ProductIds]
                }));
                tab.Products.Clear();
                tab.Products.AddRange(ViewModel.Products.Items.Select(x => new Product
                {
                    Id = x.ProductId,
                    Name = x.Name,
                    Price = x.Price,
                    Quantity = x.Quantity
                }));
                storage.SetItem(tab.Id, tab);
            });
    }
}
