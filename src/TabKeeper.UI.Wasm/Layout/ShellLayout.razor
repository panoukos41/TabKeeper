@inherits LayoutComponentBase
@implements IDisposable

@inject TranslateService translate
@inject NavigationManager nav
@{
#if !DEBUG
    // Using directives because of these issues with GitVersion:
    // https://github.com/GitTools/GitVersion/issues/4102#issuecomment-2254823123
    // https://github.com/GitTools/GitVersion/discussions/4130
    if (!string.IsNullOrEmpty(GitVersionInformation.PreReleaseLabel))
    {
        <div class="fixed w-full h-0 pointer-events-none">
            <div class="p-1 bg-amber-500 origin-top float-right mt-4 mr-4 w-28 text-center translate-x-1/2 rotate-45 pointer-events-none">
                <span class="font-mono font-semibold text-xs pointer-events-none">PRE</span>
            </div>
        </div>
    }
#endif
}

<PageTitle>@(string.IsNullOrEmpty(Title) ? "Tab Keeper" : $"Tab Keeper - {Title}")</PageTitle>

<header class="flex w-full max-w-screen truncate min-h-20 items-center p-6 gap-2 border-b border-on-surface">
    <Button key="Back" If="nav.Uri != nav.BaseUri" OnClick="() => nav.NavigateTo(nav.BaseUri)"><FaSolidCircleChevronLeft class="icon" /></Button>
    <h1 class="font-bold truncate">@Title</h1>
</header>

<main class="overflow-y-auto p-2">
    @Body
</main>

@code {
    private static readonly BehaviorSubject<ShellContext> contextSub = new(new());
    private IDisposable? sub;

    protected override void OnInitialized()
    {
        sub = contextSub.Subscribe(_ => StateHasChanged());
    }

    public static IObservable<ShellContext> ContextChanged { get; } = contextSub.AsObservable();

    public static ShellContext Context
    {
        get => contextSub.Value;
        set {
            if (contextSub.Value == value) return;
            contextSub.OnNext(value);
        }
    }

    public static string Title
    {
        get => Context.Title;
    }

    public static string? BackUri
    {
        get => Context.BackUri;
    }

    public void Dispose()
    {
        sub?.Dispose();
        sub = null;
    }
}
