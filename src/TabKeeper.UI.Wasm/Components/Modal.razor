@inherits IgnisComponentBase

<Transition Appear Show="Open" AsComponent="typeof(Fragment)" Context="_">
    <Dialog>
        <TransitionChild
            AsComponent="typeof(Fragment)"
            Enter="ease-out duration-300"
            EnterFrom="opacity-0"
            EnterTo="opacity-100"
            Leave="ease-in duration-200"
            LeaveFrom="opacity-100"
            LeaveTo="opacity-0"
            Context="transition">

            <div class="@Css.Class("absolute inset-0 bg-black bg-opacity-25", transition)"></div>

        </TransitionChild>

        <div class="absolute inset-0 overflow-y-auto" @onclick="() => BackdropDismiss ? Hide() : default">
            <div class="flex min-h-full items-center justify-center p-4 text-center">
                <TransitionChild
                    AsComponent="typeof(Fragment)"
                    Enter="ease-out duration-300"
                    EnterFrom="opacity-0 scale-95"
                    EnterTo="opacity-100 scale-100"
                    Leave="ease-in duration-200"
                    LeaveFrom="opacity-100 scale-100"
                    LeaveTo="opacity-0 scale-95"
                    Context="transition">

                    <div class="@Css.Class("w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all", transition)">
                        @(ChildContent?.Invoke(new ModalContext(Hide)))
                    </div>
                </TransitionChild>
            </div>
        </div>
    </Dialog>
</Transition>

@code {
    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public RenderFragment<ModalContext>? ChildContent { get; set; }

    [Parameter]
    public bool BackdropDismiss { get; set; } = true;

    private None dismissBackdrop() => BackdropDismiss ? Hide() : None.Value;

    public None Show()
    {
        Open = true;
        Update();
        return None.Value;
    }

    public None Hide()
    {
        Open = false;
        Update();
        return None.Value;
    }

    public None Toggle()
    {
        Open = !Open;
        Update();
        return None.Value;
    }
}
