@using Ignis.Components
@using Ignis.Components.HeadlessUI

@inherits CoreComponent
@implements IAsyncDisposable

<dialog id="@Id" class="@this.Class()" @onclose="OnClose" @oncancel="OnClose" @onclick="OnClick">
    @if (IsOpen)
    {
        @(ChildContent?.Invoke(this))
    }
</dialog>

@code {
    private Lazy<ValueTask<IJSObjectReference>> dialog;
    private IDisposable? currentAction;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public IObservable<bool>? IsOpenWhen { get; set; }

    [Parameter]
    public IObservable<Nothing>? UpdateWhen { get; set; }

    [Parameter]
    public RenderFragment<Dialog>? ChildContent { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback OnDismiss { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    public Dialog(IJSRuntime jsRuntime)
    {
        dialog = new(() => jsRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", Id));
    }

    public void Open()
    {
        if (IsOpen || dialog is null) return;

        currentAction?.Dispose();
        currentAction = R3.Observable
            .FromAsync(async ct => await (await dialog.Value).InvokeVoidAsync("showModal", ct))
            .Subscribe(this, static (_, state) =>
            {
                state.IsOpen = true;
                state.IsOpenChanged.InvokeAsync(true);
                state.StateHasChanged();
                state.OnShow.InvokeAsync();
            });
    }

    public void Close()
    {
        if (!IsOpen || dialog is null) return;

        currentAction?.Dispose();
        currentAction = R3.Observable
            .FromAsync(async ct => await (await dialog.Value).InvokeVoidAsync("close", ct))
            .Subscribe(this, static (_, state) =>
            {
                state.IsOpen = false;
                state.IsOpenChanged.InvokeAsync(false);
                state.StateHasChanged();
            });
    }

    public void Toggle()
    {
        if (IsOpen) Close();
        else Open();
    }

    protected void OnClose()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(IsOpen);
        OnDismiss.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        if (IsOpenWhen is { })
        {
            IsOpenWhen
                .Subscribe(open =>
                {
                    if (open)
                        Open();
                    else
                        Close();
                })
                .DisposeWith(this);
        }
        if (UpdateWhen is { })
        {
            UpdateWhen
                .Subscribe(_ => Update())
                .DisposeWith(this);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (dialog.IsValueCreated is false)
        {
            return;
        }
        await (await dialog.Value).DisposeAsync();
    }
}
